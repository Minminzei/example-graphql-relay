type Query {
  node(id: ID!): Node!
  user(id: ID!): User!
  chat(id: ID!): Chat!
  chats(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    user_id: ID
  ): ChatConnectionConnection!
  viewer: User!
  viewerChats(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ChatConnectionConnection!
}

interface Node {
  id: ID!
}

type User {
  id: ID!
  name: String!
  image: String!
  email: String!
  division: String!
}

type Chat implements Node {
  id: ID!
  title: String!
  user: User!
  posts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnectionConnection
}

"""A connection to a list of items."""
type PostConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostConnectionEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostConnectionEdge {
  """The item at the end of the edge"""
  node: Post!

  """A cursor for use in pagination"""
  cursor: String!
}

type Post {
  id: ID!
  user: User!
  content: String!
  deletedAt: String
}

"""A connection to a list of items."""
type ChatConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatConnectionEdge]
}

"""An edge in a connection."""
type ChatConnectionEdge {
  """The item at the end of the edge"""
  node: Chat!

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  updateProfile(input: ProfileInput!): ProfileUpdatedResult!
  createChat(input: CreateChatInput!): ChatCreatedResult!
  removeChat(input: RemoveChatInput!): RemoveChatResult!
  createPost(input: CreatePostInput!): CreatePostResult!
  removePost(input: RemovePostInput!): PostRemovedResult!
}

union ProfileUpdatedResult = User | ProfileUpdatedError

type ProfileUpdatedError {
  message: String!
}

input ProfileInput {
  name: String!
  image: String!
  email: String!
  division: String!
}

union ChatCreatedResult = ChatEdges | ChatDuplicateNameError | ChatCreatedError

type ChatEdges {
  chatEdges: ChatConnectionEdge
}

type ChatDuplicateNameError {
  message: String!
}

type ChatCreatedError {
  message: String!
}

input CreateChatInput {
  user_id: ID!
  title: String!
}

union RemoveChatResult = RemoveChatId | RemoveChatError

type RemoveChatId {
  removeChatId: ID!
}

type RemoveChatError {
  message: String!
}

input RemoveChatInput {
  user_id: ID!
  id: ID!
}

union CreatePostResult = PostEdges | CreatePostError

type PostEdges {
  postEdges: PostConnectionEdge
}

type CreatePostError {
  message: String!
}

input CreatePostInput {
  chat_id: ID!
  user_id: ID!
  content: String!
}

union PostRemovedResult = RemovePostId | PostRemovedError

type RemovePostId {
  removePostId: ID!
}

type PostRemovedError {
  message: String!
}

input RemovePostInput {
  id: ID!
  user_id: ID!
}